date: 2012-01-06 08:23:24 -0600
categories: journal
flags: draft

# The new fight for the soul of Rails

[Jeremy](http://avdi.org/devblog/2011/11/15/early-access-beta-of-objects-on-rails-now-available-2/) was kind enough to gist [Bob Martin's Ruby Midwest
keynote](http://confreaks.net/videos/759-rubymidwest2011-keynote-architecture-the-lost-years),
saving me an hour (or three, evidently):

>  I had to watch it 3 times to get at his main point, which still (to
>  my ears) doesn’t really have any evidence behind it or meat to it
>  outside of “Uncle Bob says.” Even worse, as I was listening, I kept
>  getting angrier by the minute at the gross mischaracterizations or
>  downright mistruths he was spouting. The following list is just a
>  collection of things I caught on my first couple of listens. Maybe
>  there are more in there, but these were glaring enough to catch my
>  attention.

In a point-by-point analysis, he
takes on Martin's assertions, to which [Bob replies in
turn](http://omgbloglol.com/post/15190003367/bad-or-my-unfortunately-unfavorable-review-of-bob#dsq-comment-399571764). It's a great exchange, and I encourage you to read the original post and ensuing comments.

It seems to me that there's a bigger conflict brewing though -- a new fight for the soul of Rails, and
possibly Ruby web development, the likes we haven't seen since the Great
Merb Kerfuffle of 2008.

## More object orientation

[Steve](http://blog.steveklabnik.com/posts/2011-12-30-active-record-considered-harmful),
[Avdi](http://avdi.org/devblog/2011/11/15/early-access-beta-of-objects-on-rails-now-available-2/),
and others are arguing for more classical OOP approach that seeks to
reduce dependence on ActiveRecord (or even ActiveModel) for business
logic and beef up rendering with something like a ViewModel to remove logic
from templates. Keith Gaddis sees it as [evolving
Rails](http://karmajunkie.com/blog/2011/12/30/evolving-rails/), applying
enterprise patterns for the more complex tier of web applications -
patterns that certainly go against historical Rails culture.

I fled .NET and the [Architect
Astronauts](http://www.joelonsoftware.com/items/2008/05/01.html) that
were advocating n-tier approaches like Windows DNA&reg;. I fell in love
with Rails because it took a common sense, practical approach for _most
web applications_. It excited me because it was a sharp contrast to
the over-architected world of .NET in which I lived, a world that valued
[abstraction and
indirection](http://zedshaw.com/essays/indirection_is_not_abstraction.html)
more than adding business value.


## A steeper onramp

I'm not saying we shouldn't try to accomodate more complex applications
on Rails, but we need to ask _at what cost?_ The Merb/Rails dustup three
years ago pushed Rails in a new, arguably better direction, but the
[framework
agnosticsm](http://weblog.rubyonrails.org/2008/12/23/merb-gets-merged-into-rails-3)

