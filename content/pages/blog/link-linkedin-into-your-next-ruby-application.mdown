date: 2009-11-29 18:12:42 -06:00
categories: blog
template: article

# Link LinkedIn into your next Ruby application
LinkedIn <a href='http://blog.programmableweb.com/2009/11/23/linkedin-api-platform-goes-live-your-resume-and-business-network-now-have-an-api/'>launched</a> its new API last week, allowing any developer brave enough to implement <a href='http://oauth.net'>OAuth</a> to integrate with one of the largest social networks around. Seeking an opportunity to really understand OAuth more fully and play around with the <a href='http://developer.linkedin.com'>LinkedIn API</a> at the same time, I created the <a href='http://gemcutter.org/gems/linkedin'>LinkedIn Ruby Gem</a>.
<!--more-->
<h4>What's exposed?</h4>
The LinkedIn API documentation could use some organization. To save you some digging, here are the main aspects of the REST API.

<dl>
<dt><a href="http://developer.linkedin.com/docs/DOC-1002">Profile</a></dt>
<dd>View public and full information for LinkedIn members based on the authenticated user, member ID, or public profile URL. Visibility of profile information depends on the distance the target user is to the authenticated user in his LinkedIn network. </dd>
<dt><a href="http://developer.linkedin.com/docs/DOC-1004">Connections</a></dt>
<dd>Retrieve the authenticated user's social graph</dd>
<dt><a href="http://developer.linkedin.com/docs/DOC-1007">Status</a><dt>
<dd>Let everyone know what you're up to, or see what they're working on.</dd>
<dt><a href="http://developer.linkedin.com/docs/DOC-1005">Search</a></dt>
<dd>Find LinkedIn public profiles based on several criteria.</dd>
<dt><a href="http://developer.linkedin.com/docs/DOC-1012">Invitations</a></dt>
<dd>Invite users to connect on behalf of the authenticated user.</dd>
</dl>

<h4>Getting started</h4>
Before you can use the API, you'll need to set up your <a href="https://www.linkedin.com/secure/developer">API keys</a>.

<div id="__ss_2576372"><a style="font:14px Helvetica,Arial,Sans-serif;display:block;margin:12px 0 3px 0;text-decoration:underline;" href="http://www.slideshare.net/episod/getting-started-with-the-linkedin-api" title="Getting Started with the LinkedIn API">Getting Started with the LinkedIn API</a><object style="margin:0px" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=introdevelopernetwork-091124132311-phpapp02&stripped_title=getting-started-with-the-linkedin-api" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=introdevelopernetwork-091124132311-phpapp02&stripped_title=getting-started-with-the-linkedin-api" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object></div>

<h4>Ruby gem installation</h4>
[ruby]
# Are you ready to Tummmmmmmmmmmmble?
sudo gem install gemcutter
gem tumble

sudo gem install linkedin
[/ruby]

<h4>Usage</h4>
Start by authenticating via OAuth. To play around from <code>irb</code>, you'll need to authenticate via the PIN method.
[ruby]
require 'rubygems'
require 'linkedin'

# get your api keys at https://www.linkedin.com/secure/developer
client = LinkedIn::Client.new('your_consumer_key', 'your_consumer_secret')
rtoken = client.request_token.token
rsecret = client.request_token.secret

# to test from your desktop, open the following url in your browser
# and record the pin it gives you
client.request_token.authorize_url
=> &quot;https://api.linkedin.com/uas/oauth/authorize?oauth_token=&lt;generated_token&gt;&quot;

# then fetch your access keys
client.authorize_from_request(rtoken, rsecret, pin)
=> [&quot;OU812&quot;, &quot;8675309&quot;] # &lt;= save these for future requests

# or authorize from previously fetched access keys
client.authorize_from_access(&quot;OU812&quot;, &quot;8675309&quot;)

# you're now free to move about the cabin, call any API method
[/ruby]

Be sure and save those access keys and just call <code>authorize_from_access</code> in subsequent <code>irb</code> sessions.

<h5>Grabbing a profile</h5>
Once authenticated via OAuth, you can grab the profile for the authenticated user simply by calling <code>profile</code>
[ruby]
# get the profile for the authenticated user
client.profile
[/ruby]

You can also grab the profile for another user via the member id or public profile url:

[ruby]

# get a profile for someone found in network via ID
client.profile(:id => 'gNma67_AdI')

# get a profile for someone via their public profile url
client.profile(:url => 'http://www.linkedin.com/in/netherland')

[/ruby]

If you want to see more than <code>first-name</code>,<code>last-name</code>, and <code>headline</code>, you'll need to pass in a list of fields to return:

[ruby]
# get a profile for someone found in network via ID
client.profile(:id => 'gNma67_AdI', :fields => %w(first-name, last-name, headline, positions, education))
[/ruby]

For the full list of possible fields, check the <a href='http://developer.linkedin.com/docs/DOC-1002'>docs.</a>

<h4>More examples</h4>
For examples using the other API methods, <a href="http://github.com/pengwynn/linkedin/tree/master/examples/">check out the examples folder in the source on GitHub</a>.

<h4>Summary</h4>
I want to give a big hat tip to <a href="http://twitter.com/jnunemaker">John Nunemaker</a> for helping me implement OAuth in this gem and for inspiring me with his ultra-popular <a href="http://github.com/jnunemaker.com/twitter">Twitter gem</a>. 

Once you navigate the documentation, I believe you'll find the LinkedIn API to be a powerful platform to integrate into your Ruby applications. Install the gem and go build somethting cool.
