date: 2009-12-15 10:24:57 -06:00
categories: blog, javascript, mashups, github, jquery
template: article

# Use JavaScript to put GitHub info on your site
In case you missed it, <a href="http://adamstacoviak.com">Adam</a> and I launched a <a href="http://thechangelog.com">new blog</a> and are six episodes into a new podcast where we bring you what's fresh and new in open source software. Our goal is to scour the depths of <a href="http://github.com">GitHub</a> (and other sources) to highlight the cool new and newly released open source projects. As the good folks at Github <a href="http://github.com/blog/555-the-changelog">recently highlighted</a>, one of my favorite features of the blog is the GitHub integration. Here's how to use JavaScript to put GitHub info on your site.
<!--more-->
For The Changelog, when we link to a GitHub repo, we wanted to display the number of times the repo has been forked or watched:
<img src='http://farm3.static.flickr.com/2522/4188158734_a7c7260d40.jpg' class='flickr'alt='Changelog GitHub integration'/>

To do this, we call <a href="http://develop.github.com">Version 2 of the GitHub API</a>, which provides a great deal of info about GitHub users and repositories. To retrieve repo info, we call <code>repos/show</code> method:

<a href="http://github.com/api/v2/xml/repos/show/pengwynn/linkedin">http://github.com/api/v2/xml/repos/show/pengwynn/linkedin</a>

The API supports JSON, YAML, and XML return types. From JavaScript, JSON is the simplest data format to work with. Simply replace the <code>xml</code> segment with <code>json</code>:

<a href="http://github.com/api/v2/json/repos/show/pengwynn/linkedin">http://github.com/api/v2/json/repos/show/pengwynn/linkedin</a>

Most likely, hitting this URL from your browser will download the file. Open that up in your favorite text editor and you should see a JavaScript Object Notation representation of the same repo info:

    :::javascript
    {
        "repository": {
            "url": "http://github.com/pengwynn/linkedin",
            "description": "Ruby wrapper for the LinkedIn API",
            "watchers": 43,
            "homepage": "http://bit.ly/ruby-linkedin",
            "fork": false,
            "forks": 1,
            "private": false,
            "name": "linkedin",
            "owner": "pengwynn",
            "open_issues": 1
        }
    }

To put this info on the page, in our example, we'll use jQuery, but you can of course use another framework or plain vanilla JavaScript.

    :::javascript
    jQuery(document).ready(function($){

      $.each($('.post.link.github h3 a'), function() {
        var post = $(this).parents(".post");
        var url = $(this).attr('href');
        var segments = url.split('/');
        var repo = segments.pop();
        var username = segments.pop();
        $.getJSON("http://github.com/api/v2/json/repos/show/"+username+"/"+repo+"?callback=?", function(data){
          var repo_data = data.repository;
          if(repo_data) {
            var watchers_link = $('<a>').addClass('watchers').attr('href', url+'/watchers').text(repo_data.watchers);
            var forks_link = $('<a>').addClass('forks').attr('href', url+'/network').text(repo_data.forks);
            var comment_link = post.find('.meta .comment-count');
            comment_link.after(watchers_link);
            comment_link.after(forks_link);
          }
        });
      });
    });

This code looks for any entries that have CSS classes of <code>link</code> and <code>github</code> (which come from the post's tags), and find the <code>href</code> for the link. We then lop off the last two URL segments to get the repo name and user to pass to our API call.

Note the <code>callback=?</code> which is required for the dynamic <code><a href="http://ajaxian.com/archives/jsonp-json-with-padding">JSONP</a></code> callback which jQuery wires up to our inline callback function. In this function, the <code>data</code> parameter is that JSON we looked at earlier. In this case we just create a couple of links that point back to GitHub and append them to the <code>.meta</code> div for the post.

Easy peasy!

