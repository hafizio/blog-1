date: 2009-10-29 02:52:43 -05:00
categories: blog, wordpress, themes
template: article

# Build a WordPress theme with Thematic
In a <a href="http://wynnnetherland.com/2009/10/theme-frameworks/">previous post</a>, we looked at the new trend of theme frameworks. Today we'll build a WordPress theme step-by-step using the <a href="http://themeshaper.com">Thematic</a> theme framework.<!--more-->

For the sake of this tutorial, we'll assume you already have WordPress installed and you're ready to begin skinning your site.

### Step 1: Download Thematic

To begin, grab the latest version of Thematic from <a href="http://themeshaper.com">the web site</a> (version <a href="http://wordpress.org/extend/themes/download/thematic.0.9.5.1.zip">0.9.5.1</a> as of this post). Install Thematic as you would any other WordPress theme by copying to<code> wp-content/themes/</code>.

### Step 2: Create your new child theme folder

Look inside the <code>thematic</code> theme folder and you'll see a folder named <code>thematicsamplechildtheme</code>. Copy this folder up a level (to the same location we put the thematic theme folder) and rename it to the name of your new theme. For the sake of the example we'll call ours <code>mynewtheme</code>.

Open up the <code>mynewtheme</code> folder and let's take a look at what we get out of the box:

* readme.txt
* functions.php
* style.css


Not much, huh? That's because our child theme will extend the thematic theme next to it. We'll just add what we need and override the things we want to change.

### Step 3: Edit your theme meta-data

Open up <code>styles.css</code> and edit the meta-data in the comment block at the top of the file:

    :::css
    /*   
    Theme Name: My new theme
    Theme URI:  http://mynewtheme.example.com
    Description: A nice description to show up in the WordPress admin.
    Author: Ulysses Everett McGill
    Author URI: http://twitter.com/ueverettmcgill/
    Template: thematic
    Version: 1.0
    Tags: Thematic
    .
    Thematic is Â© Ian Stewart http://themeshaper.com/
    .
    */


Now let's look at the rest of <code>style.css</code>:

    :::css
    /* Reset browser defaults */
    @import url('../thematic/library/styles/reset.css');

    /* Apply basic typography styles */
    @import url('../thematic/library/styles/typography.css');

    /* Apply a basic layout */
    @import url('../thematic/library/layouts/2c-r-fixed.css');

    /* Apply basic image styles */
    @import url('../thematic/library/styles/images.css');

    /* Apply default theme styles and colors */
    /* It's better to actually copy over default.css into this file (or link to a copy in your child theme) if you're going to do anything outrageous */
    @import url('../thematic/library/styles/default.css');

    /* Prepare theme for plugins */
    @import url('../thematic/library/styles/plugins.css');


You're free to use as much or as little of this boilerplate CSS as you want. How much of these <code>@import</code> statements I keep around varies by project.

<strong>Before we forget, let's go ahead and activate our new theme under Appearance -> Themes in the Wordpress admin.
</strong>

As powerful as CSS is, at some point we're going to want to add to or change the markup we get from Thematic when we create our new theme. <code>functions.php</code> is the starting point to do just that.

### Step 4: Wire up your hooks and filters

Thematic builds on WordPress architecture and provides two main ways to modify the markup and behavior of your site - hooks and filters.

<h5>Hooks</h5>

Think of Thematic hooks as placeholders in the underlying theme that you can graft on your own content. These functions are strategically placed in common spots where you would might want to add content such as above and below the page header, above and below posts, above the page footer, etc.

Let's look at using a sample hook to add some content below the page header.

    :::html
    // Creating the content for the Intro
    function mynewtheme_intro() {
      if (is_front_page()) { ?&amp;amp;amp;gt;
        &lt;div id='intro'&gt;
         &lt;h1&gt;Why did the little cookie cry? Because his mom was a wafer so long!&lt;/h1&gt;
       &lt;/div&gt;
      &lt;?php
      }
    }
    add_action('thematic_belowheader', 'mynewtheme_intro');
    // END of Intro

Implementing a hook is a two step process. First, create your function that will provide the content for the hook. I like to prefix the function with the name of the theme followed by a descriptive, meaningful name for what the function does (which may or may not relate to the hook name at all).

The second step is to wire up the hook by calling <code>add_action</code>, passing the thematic hook name and our function name as arguments.

<h5>Filters</h5>

Filters work much like hooks except they allow you to take some data, act on it, and return something else. Let's say we wanted to add additional RSS feeds to the <code>head</code> of our web page. We can use a filter to do that:

    :::php
    function mynewtheme_rssfeeds($content) {
      $content .= &quot;\t&quot;;
      $content .= &quot;&lt;link rel=\&quot;alternate\&quot; type=\&quot;application/rss+xml\&quot; href=\&quot;&quot;;
      $content .= &quot;http://feeds.feedburner.com/myawesomesite&quot;;
      $content .= &quot;\&quot; title=\&quot;&quot;;
      $content .= wp_specialchars(get_bloginfo('name'), 1);
      $content .= &quot; &quot; . __('on Feedburner', 'thematic');
      $content .= &quot;\&quot; /&gt;&quot;;
      $content .= &quot;\n&quot;;
      return $content;
    }
    add_filter('thematic_rss', 'mynewtheme_rssfeeds');


In this example we use the <code>thematic_rss</code> filter to take the existing RSS feed links (represented in <code>$content</code>) and add to it.

### Opting-out

In some cases you'll want to turn off some Thematic features. We do this with <code>remove_action</code>. Let's say we want to remove the default blog description from the header:

    :::php
    // Remove default Thematic actions
    function remove_thematic_actions() {
     remove_action('thematic_header', 'thematic_blogdescription', 5);
    }
    add_action('init','remove_thematic_actions');


We create a function that removes the actions we don't want and then wire up our wrapper function by a call to <code>add_action</code> on <code>init</code>.

### Neat! So how many hooks & filters are there?

You can find the complete list of <a href="http://themeshaper.com/thematic/guide/?page_id=10">hooks</a> and <a href="http://themeshaper.com/thematic/guide/?page_id=12">filters</a> in the <a href="http://themeshaper.com/thematic/guide/">Thematic customization guide</a>. The list is long but comprehensive. Fortunately, community member dwenaus created an awesome <a href="http://bluemandala.com/thematic/thematic-structure.html">visual diagram</a>.

<a href="http://bluemandala.com/thematic/thematic-structure.html"><img src="http://wynnnetherland.com/wp-content/uploads/2009/10/Screen-shot-2009-10-28-at-5.47.27-PM.png" alt="Screen shot 2009-10-28 at 5.47.27 PM" title="Screen shot 2009-10-28 at 5.47.27 PM" width="244" height="526" class=" size-full wp-image-41" /></a>

As the diagram indicates, Thematic is fully widgetized out of the box with several aside regions for your widgets.

### Advanced theming: It's still WordPress

What I love about Thematic is that it does not prevent me from using regular WordPress development features in my themes. I can still override functionality with my own templates, use  built-in WordPress filters (like <code>wp_head</code>), and use all the plugins that have made WordPress very popular. 

### Summary

Thematic is a very full-featured yet extensible theming framework that let's me build WordPress sites quickly without starting from scratch. Give it a whirl and go create an awesome WordPress theme!
