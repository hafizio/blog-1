date: 2009-10-27 07:23:19 -05:00
categories: blog

# From themes to theme frameworks
Back in the 1990's, early in my career, I recall the dream of software components. One day, we would all drag a few components to a design surface, configure some properties, and quickly stitch together new applications. Reuse was our god. Software vendors cranked out shiny new idols with new major version numbers at least once a year. I suppose somewhere in the catacombs of Corporate America, this type of development still continues.
<h4>The rise of frameworks</h4>
As Open Source software broke the stranglehold software vendors had on application development, one of the biggest trends of the later 2000's has been the emergence of web frameworks.

<!--more-->

How many of these frameworks are you using in your web applications?
<ul>
	<li>Server-side (Rails, .NET, Django, etc.)</li>
	<li>JavaScript (jQuery, Prototype, Moo, dojo, etc.)</li>
	<li>CSS (Blueprint, 960.gs, YUI, etc.)</li>
</ul>
So what makes a good framework? For me good frameworks:
<ul>
	<li><strong>Make common tasks easier</strong>. Can you do AJAX without jQuery? Of course, and I'm sure you still do from time to time. When jQuery reduces the 80% of AJAX scenarios to one line of code, the benefit is obvious.</li>
	<li><strong>Know when to get out of the way</strong>. Good frameworks allow the developer to drop down to more low-level constructs to get work done. Rails provides a number of helpers for creating HTML, but at any time I can craft my own markup. Blueprint provides an out-of-the-box grid layout system, but I'm free to provide my own non-grid layout.</li>
	<li><strong>Provide a great starting point</strong>. Good frameworks offer a bundle of value in an <em>opinionated</em> package as if to say 'Come for the free code, stay for the ideas.' For instance, Rails provides a standard directory structure. I can jump into any Rails project and know exactly where things go. Blueprint provides beautiful typography out of the box. With both, I'm getting a return on my installation overhead from the first few minutes of development.</li>
</ul>
<h4>Themable apps - the <a href="http://www.scion.com/">Scions</a> of web development</h4>
Another trend in web development is after-market customization. Some of the most popular open source (and proprietary) projects provide ways to customize application look and feel. Often these changes can be bundled and distributed as an application <em>theme</em>. <a href="http://themeforest.net/category/wordpress">Marketplaces of premium themes</a> are cropping up all the time as the popularity of WordPress soars.

I've always enjoyed using WordPress. For blogs and sites that need a lightweight CMS, it's hard to beat. I just have never enjoyed <em>theming</em> WordPress. I'm spoiled by the layouts in Rails where you basically layout your site design and the content for each page is dropped into the middle. In WordPress, quite often you open HTML tags in one file (like header.php) and close them in another (like footer.php). Missing a closing DIV tag can be a twenty minute wormhole.

For many projects, someone else's handcrafted markup is just as good as my own as long as I can add to it and style it appropriately. That's the idea behind a growing number of <a href="http://www.smashingmagazine.com/2009/05/27/wordpress-theme-development-frameworks/">WordPress theme frameworks</a>. Just like the frameworks mentioned earlier, theme frameworks provide the same benefits outlined earlier. They make common tasks easier, they still allow for lower-level development, and they especially in the case of WordPress, they provide a great starting point for your site design.

Another big benefit of going with a theme framework is <strong>insulation from change</strong>. By using <a href="http://themeshaper.com/">Thematic</a> to build this site, I don't have to worry as much about WordPress changing lower-level functions and breaking my theme because Thematic handles most of the normal logic that goes into a blog site. Instead, my theme uses extension hooks provided by Thematic to add, filter, and opt-out of content. In my next post, we'll walk through creating a simple Thematic theme.
<h4>Theme frameworks - not just for blogs</h4>
I think theme frameworks make sense for mature projects with a finite set of basic functionality. Blogs surely fit this category, but I am anxious to explore them for projects involving ecommerce, forums, and issue trackers. We're in the early phases of development, but look for some of these theme framework concepts to make into the next release of <a href="http://spreecommerce.com">Spree</a>, the open source Rails ecommerce project.
